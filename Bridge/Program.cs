using System;

/// <summary>
/// Тип - структурный 
/// 
/// Описание - отделяет абстракцию от реализации так, что то и другое можно изменять независимо.
/// 
/// Назначение - используется для того, чтобы разделять абстракцию и реализацию так, чтобы они могли изменяться независимо.
/// 
/// Метафора: 
/// Представим ситуацию, когда вам требуется работать на разных автомобилях, однако садясь в новый автомобиль вам уже желательно знать как им управлять. 
/// Таким образом вы сталкиваетесь с паттерном «мост». С одной стороны вы имеете множество различных автомобилей (разные модели и марки), 
/// но среди все них есть общая абстракция (интерфейс) ввиде руля, педалей, коробки передач и так далее. 
/// Таким образом мы задаем как-бы правила изготовления автомобилей по которым мы можем создавать любые их виды, 
/// но за счет сохранения общих правил взаимодействия с ними, мы можем одинаково управлять каждым из них. 
/// «Мостом» в данном случае является пара двух «объектов»: конкретного автомобиля и правил взаимодействия с этим (и любым другим) автомобилем.
/// 
/// Потенциальные проблемы - В зависимости от конкретной ситуации и структуры проекта в целом, возможно негативное влияние на продуктивность программы
/// (например, если нужно инициализировать большее количество объектов).
/// 
/// 
/// </summary>

namespace Bridge
{
    class Program
    {
        static void Main(string[] args)
        {
            Abstraction abstr = new Abstraction();
            abstr.SetImplementor(new Implementor1());
            abstr.Operation();
            abstr.SetImplementor(new Implementor2());
            abstr.Operation();
            Console.ReadKey();
        }
    }
}
