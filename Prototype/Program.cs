using System;

/// <summary>
/// Тип – порождающий.
/// 
/// Описание - создает новые объекты с помощью прототипов. Прототип - некоторый объект, умеющий создавать по запросу копию самого себя.
/// 
/// Назначение - Использует для создания новых объектов копию самого себя.
/// 
/// Метафора:
/// Данный паттерн чем-то напоминает «фабрику», он также служит для создания объектов, однако с немного другим подходом. 
/// Представьте что у вас есть пустой пакет (из под сока), а вам нужен полный с апельсиновым соком. 
/// Вы «говорите» пакету «Хочу пакет апельсинового сока», он в свою очередь создает свою копию и заполняет ее соком, который вы попросили. 
/// Немного «сказочный пример», но в программировании часто так и бывает. 
/// В данном случае пустой пакет и является «прототипом», и в зависимости от того что вам требуется, он создает на своей основе требуемые вами объекты (пакеты сока).
/// Клонирование не обязательно должно производится на самом «пакете», это может быть и какой-то другой «объект», 
/// главное лишь что данный «прототип» позволяет получать его экземпляры.
/// 
/// Потенциальные проблемы - основной недостаток паттерна прототип заключается в том, 
/// что каждый подкласс класса Prototype должен реализовывать операцию Clone, а это далеко не всегда просто. 
/// </summary>

namespace Prototype
{
    class Program
    {
        static void Main(string[] args)
        {
            ShallowCloneClass sc1 = new ShallowCloneClass();
            sc1.X = 1; sc1.Y = 2; sc1.ds.A = 3; sc1.ds.B = 4;
            ShallowCloneClass sc2 = (ShallowCloneClass)sc1.Clone();
            Console.WriteLine(sc1.ToString());
            Console.WriteLine(sc2.ToString());

            DeepCloneClass dc1 = new DeepCloneClass();
            dc1.X = 1; dc1.Y = 2; dc1.ds.A = 3; dc1.ds.B = 4;
            DeepCloneClass dc2 = (DeepCloneClass)dc1.Clone();
            Console.WriteLine(dc1.ToString());
            Console.WriteLine(dc2.ToString());

            Console.ReadKey();
        }
    }
}
